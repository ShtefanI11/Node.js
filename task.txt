/////////////////////////////////////////////////////Practice////////////////////////////////////////////////////////////
#Принимать и отвечать данными в формате JSON ¶

#Взаимодействуя с API, вы всегда отправляете определенные данные 
#с запросом или получаете их в ответ. Существует множество 
#различных форматов данных, но JSON (Javascript Object Notation)
#является стандартизованным форматом.

#В силу своей стандартизации API должны принимать данные в 
#формате JSON и отвечать на них.

//№1 src/services/workoutService.js
"Также рекомендуется называть методы сервиса так же, как и 
методы контроллера"
1. Создать функции с названием из каждого метода Controllers
2. Импортировать бд ,в функции создать переменную допустим:
allWorkouts присвоить обращение к бд достать все тренировки.
3. Вернуть переменную со всеми тренировками.

//№2 src/controllers/workoutController.js
"Внутри нашего контроллера workout мы можем использовать 
эти методы."
1. Импортируем все методы из workoutService
2. Создаём внутри методов переменные и ссылаемся на них:[allWorkouts,
workout, createWorkout, updateWorkout,]
2.1 для удаления переменную не создавать,вызвать сразу метод.
3. В ответ пользователю вернуть ответ в объекте status 200 = ok,
data: данные которые мы сохраняем в переменной, пришли они из 
Service

//№3 src/database
"База данных уже создана в формате json
Тренировки состоять из таких данных: id, name, mode, equipment,
exercises, createdAt, updatedAt и trainerTips."
1. В файле Workout.js Импортируем базу данных 
2. Создать функцию ,допустим getAllWorkouts в ней вернуть с базы
данных все тренировки"в бд зайди посмотреть поля и вернуть всё"
3. 

///////////////////////////////////////////ProjectArchitecture/////////////////////////////////////////////////////////
#Архитектура проекта.
"Router => Controller => Service Layer => Data Access Layer"
#Запрос & Ответ

1. Router: В этой папке будут храниться пути, по которым будут происходить запросы;

2. Controller: В этой папке мы будем обрабатывать все, что связано с HTTP. Работать с запросами и ответами,
#для наших конечных точек.Над этим слоем также находится небольшой маршрутизатор из Express, который передает 
#запросы соответствующему контроллеру.

3. Service Layer: В этой папке мы храним всю бизнес логику ,который экспортирует методы использует Controller;

4. Data Access Layer: В этой папке мы работаем с базой данных.Будем экспортировать методы для операций с базой данных,
#такие как создание WOD, которые будет использоваться нашим Service Layer.