/////////////////////////////////////////////////////Practice////////////////////////////////////////////////////////////
#Принимать и отвечать данными в формате JSON ¶ | path3
#Реализовать методы GET | PATCH | DELET

//№1 workoutController.js
#GET ONE
1. getOneWorkoutController в константе получить params: которые в роутере workoutId из запроса
2. if workoutId нету вернуть 
3. Передать в сервис workoutId.
4. В ответ отправить статус 'OK' data данные которым мы передаем в сервис 
#PATCH UPDATED
1. updateOneWorkoutController в константе получить body, params: которые в роутере workoutId из запроса
2. if workoutId нету вернуть 
3. Передать в сервис workoutId, body.
4. В ответ отправить статус 'OK' data данные которым мы передаем в сервис 
#DELETE
1. deleteOneWorkoutController в константе получить params: которые в роутере workoutId из запроса
2. if workoutId нету вернуть 
3. Передать в сервис workoutId.
4. В ответ пишем сразу статус 204 к нему send внутри в объекте передаем строку 'OK'

//№2 workoutService.js
#GET ONE
1. Получаем в просах workoutId и передаем в Workout "в базу данных для обработки"
2. Эти функции нужно создать и дать именна: getOneWorkoutDB
#PATCH UPDATED
1. Получаем в просах workoutId,changes-"это body" и передаем в Workout "в базу данных для обработки"
2. Эти функции нужно создать и дать именна: updateOneWorkoutDB

#DELETE
1. Получаем в просах workoutId и передаем в Workout "в базу данных для обработки"
2. Эти функции нужно создать и дать именна: deleteOneWorkoutDB

//№5 Workout.js
#GET ONE
1. Получить пропс workoutId
2. Создать переменную: workout в ней обратится к бд.всем элементам и вызвать метод find
 искать id и делать сравнение типов с workoutId
3. Условие если созданная переменная не тру ! тогда вернуть
4. за условием вернуть переменную

#PATCH UPDATED
1. Получить пропс workoutId, changes
2. Создать переменную: indexForUpdate в ней обратится к бд.всем элементам и вызвать метод findIndex
 искать id и делать сравнение типов с workoutId
3. Условие если созданная переменная:indexForUpdate не ровна(сравнение типов) -1 тогда вернуть
4. Создать переменную: updatedWorkout в объекте пердавать спрет оператором DB.workouts[indexForUpdate],
спрет оператором changes,
updatedAt: new Date().toLocaleString('en-US', {
  timeZone: 'UTC',
}),
5. DB.workouts[indexForUpdate] = updatedWorkout;
6. Созданный метод из utill который читает данные вызвать его и передать DB 
7. вернуть обновление данных переменную

#DELETE
1. Получить пропс workoutId
2. Создать переменную: indexForDeletion в ней обратится к бд.всем элементам и вызвать метод findIndex
 искать id и делать сравнение типов с workoutId
3. Условие если созданная переменная:indexForDeletion не ровна(сравнение типов) -1 тогда вернуть
4. DB.workouts.splice(indexForDeletion, 1);
5. Созданный метод из utill который читает данные вызвать его и передать DB 

///////////////////////////////////////////ProjectArchitecture/////////////////////////////////////////////////////////

#Архитектура проекта.
"Router => Controller => Service Layer => Data Access Layer"
#Запрос & Ответ

1. Router: В этой папке будут храниться пути, по которым будут происходить запросы;

2. Controller: В этой папке мы будем обрабатывать все, что связано с HTTP. Работать с запросами и ответами,
#для наших конечных точек.Над этим слоем также находится небольшой маршрутизатор из Express, который передает 
#запросы соответствующему контроллеру.

3. Service Layer: В этой папке мы храним всю бизнес логику ,который экспортирует методы использует Controller;

4. Data Access Layer: В этой папке мы работаем с базой данных.Будем экспортировать методы для операций с базой данных,
#такие как создание WOD, которые будет использоваться нашим Service Layer.