/////////////////////////////////////////////////////Practice////////////////////////////////////////////////////////////
#Именование ресурсов во множественном числе¶
Create: src/controllers/WorkoutController.js
Create: src/services/WorkoutService.js
Update: src/v1/routes/WorkoutRoutes.js

/Patch№1
//№1 src/v1/routes/WorkoutRoutes.js ,rename
Определить конечные точки[get,post,patch,delete]
1. Получить все тренировки '/' в ответ вернуть send('Get all workouts') 
2. Получить определённую трен '/:workoutId' в ответ вернуть send('Get an existing workout')
3. Отправить тренировку '/' send('Create a new workout')
4. Изменить тренировку '/:workoutId' send('Update an existing workout')
5. Удалить определённую трен '/:workoutId' send('Delete an existing workout')

//№2 src/index.js
1. Заменить новый файл WorkoutRoutes
2. Использовать новый путь '/api/v1/workouts'

/Patch№2
#Теперь мы перехватываем все запросы, идущие к /api/v1/workouts,
#с помощью нашего маршрутизатора v1WorkoutRouter.
#Внутри маршрутизатора для каждой конечной точки мы будем вызывать
#свой метод, управляемый нашим контроллером.
//№1 src/controllers/workoutController.js
"Здесь создатим методы для routes"
1. Создаём функции с этими именами
[getAllWorkouts,getOneWorkout,createNewWorkout,
updateOneWorkout,deleteOneWorkout]
1.2 Они получают запрос ,ответ в ответ записуем текст примеры.
"Get all workouts" ,"Get an existing workout","Create a new workout"
"Update an existing workout", "Delete an existing workout"
1.3 Экспортируем их.

//№2 src/v1/routes/WorkoutRoutes.js
1. Импорт созданный файл контроллер.
2. Пути теже , заменить колбек функцию на соответствующий контроллер.


///////////////////////////////////////////ProjectArchitecture/////////////////////////////////////////////////////////
#Архитектура проекта.
"Router => Controller => Service Layer => Data Access Layer"
#Запрос & Ответ

1. Router: В этой папке будут храниться пути, по которым будут происходить запросы;

2. Controller: В этой папке мы будем обрабатывать все, что связано с HTTP. Работать с запросами и ответами,
#для наших конечных точек.Над этим слоем также находится небольшой маршрутизатор из Express, который передает 
#запросы соответствующему контроллеру.

3. Service Layer: В этой папке мы храним всю бизнес логику ,который экспортирует методы использует Controller;

4. Data Access Layer: В этой папке мы работаем с базой данных.Будем экспортировать методы для операций с базой данных,
#такие как создание WOD, которые будет использоваться нашим Service Layer.