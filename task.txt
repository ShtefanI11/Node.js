//Creating_Server_RESTAPI_for_CrossFit_Application 

#Архитектура проекта.
1. Router => Controller => Service Layer => Data Access Layer; 
#Запрос & Ответ

1. Router: В этой папке будут храниться пути, по которым будут происходить запросы;

2. Controller: В этой папке мы будем обрабатывать все, что связано с HTTP. Работать с запросами и ответами,
#для наших конечных точек.Над этим слоем также находится небольшой маршрутизатор из Express, который передает 
#запросы соответствующему контроллеру.

3. Service Layer: В этой папке мы храним всю бизнес логику ,который экспортирует методы использует Controller;

4. Data Access Layer: В этой папке мы работаем с базой данных.Будем экспортировать методы для операций с базой данных,
#такие как создание WOD, которые будет использоваться нашим Service Layer.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
"Базовая настройка"
1. Create a src folder
2. Create sub folders : controllers , services , database , routes
3. Create an index file : в src деректории. Файл входа;

"Установите зависимости для базовой установки:"
1. Create package.json file: npm init -y
2. Dev Dependencies: npm i -D nodemon
3. Dependencies: npm i express

"Настроить окружение, Express.Старт разработки"
//№1 index.js 
1. Импортировать express.js
2. Создать переменную для хранения Express веб-фреймворка 
3. Создать константу с номером порта условие process.env.PORT || 3000 . "1.получение порта из окружения или 3000 локальный" 
4. Создать первый router обратиться к переменной express и вызвать метод get путь / , (запрос,ответ) => 
в ответ вернуть разметку методом send h2 It's working!
5. Вызвать express метод listen прослушивать PORT , () => выводить в консоль API is listening on port и PORT

//№2 package.json
1. "script": Добавить nodemon в dev: вызов nodemon в главном файле src/index.js